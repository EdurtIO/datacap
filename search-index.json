[
  {
    "title": "自主机部署",
    "content": "DataCap 是支持用户将服务部署到自主机中。通过本文档用户可以了解如何在自主机中部署 DataCap。 --- !!! warning \"注意\" 该软件的二进制包基于以下系统进行编译和测试。它尚未在其他版本上进行测试，理论上受支持。 如果有不支持的系统，请使用源码编译方法主动编译二进制文件。 !!! | System | Version | |--------|------------| | JDK | \\>=11 | | MySQL | \\>=5.6.x | --- !!! info \"提示\" 从以下地址下载相应系统的二进制软件包进行安装。如果您需要使用源码安装请前往查看开发者文档模块。 !!! 1.下载最新发布版本 2.将二进制文件下载到本地后运行以下命令 bash tar -xvzf datacap-<VERSION>-bin.tar.gz 进入软件根目录 bash cd datacap-<VERSION> --- 对于软件的首次安装，您需要将 schema/datacap.sql 文件中的sql脚本导入MySQL服务器。注意需要导入的脚本根据下载的软件包进行匹配 !!! danger \"注意\" 如果您是通过其他版本升级，请执行 schema/<VERSION>/schema.sql !!! datacap 软件中的所有配置均在 configure/application.properties 文件中。 导入 SQL 脚本后，修改 configure/application.properties 配置文件以修改MySQL服务器的配置信息 properties server.port=9096 server.address=localhost spring.jackson.time-zone=GMT+8 spring.jackson.date-format=yyyy-MM-dd HH:mm:ss datacap.security.secret=DataCapSecretKey datacap.security.expiration=86400000 datacap.editor.sugs.maxSize=1000 server.port: 用于配置服务在服务器中启动监听的端口，默认为 9096 server.address: 用于配置服务在本地的监听地址，如果需要使用 IP+端口 方便外部机器访问，请不要设置为 localhost，建议设置为 0.0.0.0 spring.jackson.time-zone: 用于配置时区，默认为 GMT+8 spring.jackson.date-format: 用于配置日期格式，默认为 yyyy-MM-dd HH:mm:ss datacap.security.secret: 用于配置数据安全管理的密钥，默认为 DataCapSecretKey datacap.security.expiration: 用于配置数据安全管理的过期时间，单位为毫秒，默认为 86400000 datacap.editor.sugs.maxSize: 用于配置数据编辑器的最大行数，默认为 1000 已经失效不在使用 properties spring.mvc.throw-exception-if-no-handler-found=true spring.resources.add-mappings=false spring.web.resources.add-mappings=true spring.mvc.throw-exception-if-no-handler-found: 用于配置是否抛出异常 spring.resources.add-mappings: 用于配置是否启用静态资源映射 spring.web.resources.add-mappings: 用于配置是否启用静态资源映射 !!! danger \"注意\" 如果版本 >=8.x，请设置 allowPublicKeyRetrieval=true !!! properties spring.datasource.url=jdbc:mysql://localhost:3306/datacap?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true&useSSL=false&useOldAliasMetadataBehavior=true&jdbcCompliantTruncation=false&allowPublicKeyRetrieval=true spring.datasource.username=root spring.datasource.password=12345678 spring.datasource.url: 用于配置数据库连接地址 spring.datasource.username: 用于配置数据库用户名 spring.datasource.password: 用于配置数据库密码 !!! info \"提示\" 支持所有 Spring Data 的配置参数 !!! properties datacap.executor.data= datacap.executor.way=LOCAL datacap.executor.mode=CLIENT datacap.executor.engine=SPARK datacap.executor.startScript=start-seatunnel-spark-connector-v2.sh datacap.executor.seatunnel.home=/opt/lib/seatunnel datacap.executor.data: 用于配置执行器的数据缓冲路径 datacap.executor.way: 用于配置执行器的执行方式，不同的执行器拥有不同的执行方式 datacap.executor.mode: 用于配置执行器的执行模式，不同的执行器拥有不同的执行模式 datacap.executor.engine: 用于配置执行器的执行引擎 datacap.executor.startScript: 用于配置执行器的启动脚本 datacap.executor.seatunnel.home: 用于配置执行器的 Apache Seatunnel 主目录 ::: tabs === \"Spark 引擎配置\" properties datacap.executor.data= datacap.executor.way=LOCAL datacap.executor.mode=CLIENT datacap.executor.engine=SPARK datacap.executor.startScript=start-seatunnel-spark-connector-v2.sh datacap.executor.seatunnel.home=/opt/lib/seatunnel === \"Flink 引擎配置\" properties datacap.executor.data= datacap.executor.way=LOCAL datacap.executor.mode=CLIENT datacap.executor.engine=FLINK datacap.executor.startScript=start-seatunnel-flink-13-connector-v2.sh datacap.executor.seatunnel.home=/opt/lib/seatunnel === \"Seatunnel 引擎配置\" properties datacap.executor.data= # Only support LOCAL datacap.executor.way=LOCAL datacap.executor.mode=CLIENT datacap.executor.engine=SEATUNNEL datacap.executor.startScript=seatunnel.sh datacap.executor.seatunnel.home=/opt/lib/seatunnel ::: properties datacap.config.data= datacap.cache.data= datacap.config.data: 用于配置上传配置文件的路径 datacap.cache.data: 用于配置上传缓存文件的路径 properties datacap.openai.backend=https://api.openai.com datacap.openai.token= datacap.openai.model=GPT35TURBO0613 datacap.openai.timeout=30 datacap.openai.backend: 用于配置 OpenAI 的后端地址 datacap.openai.token: 用于配置 OpenAI 的 token datacap.openai.model: 用于配置 OpenAI 的模型 datacap.openai.timeout: 用于配置 OpenAI 的超时时间，单位为秒 properties datacap.registration.enable= datacap.captcha.enable= datacap.cache.maximum=100000 datacap.cache.expiration=5 datacap.audit.sql.print=false datacap.registration.enable: 用于配置是否开启注册 datacap.captcha.enable: 用于配置是否开启验证码 datacap.cache.maximum: 用于配置缓存最大值 datacap.cache.expiration: 用于配置缓存过期时间，单位为分钟 datacap.audit.sql.print: 用于配置是否打印 SQL properties datacap.pipeline.maxRunning=100 datacap.pipeline.maxQueue=200 datacap.pipeline.reset=STOPPED datacap.pipeline.maxRunning: 用于配置最大运行数 datacap.pipeline.maxQueue: 用于配置最大队列 datacap.pipeline.reset: 用于配置重置策略 --- 支持的存储类型详见 https://github.com/devlive-community/datacap/tree/dev/fs properties datacap.fs.type=Local datacap.fs.access= datacap.fs.secret= datacap.fs.endpoint= datacap.fs.bucket= datacap.fs.type: 用于配置文件系统类型 datacap.fs.access: 用于配置文件系统访问，该类型可以为空 datacap.fs.secret: 用于配置文件系统密钥，该类型可以为空 datacap.fs.endpoint: 用于配置文件系统端点，如果填写后将追加为目录 该类型可以为空 datacap.fs.bucket: 用于配置文件系统存储桶，该类型可以为空 properties datacap.fs.type=AliOss datacap.fs.access= datacap.fs.secret= datacap.fs.endpoint= datacap.fs.bucket= datacap.fs.type: AliOss properties datacap.fs.type=Qiniu datacap.fs.access= datacap.fs.secret= datacap.fs.endpoint= datacap.fs.bucket= datacap.fs.type: Qiniu properties datacap.experimental.autoLimit=true datacap.experimental.data={user.dir}/data datacap.experimental.avatarPath={username}/avatar/ datacap.experimental.autoLimit: 用于配置是否自动增加 LIMIT datacap.experimental.data: 用于配置实验性功能的数据路径 datacap.experimental.avatarPath: 用于配置实验性功能的头像路径 !!! warning \"警告\" 如果需要修改日志配置，只需修改 configure/logback.xml 配置文件即可 !!! !!! warning \"警告\" 如果您需要定制化 JVM 配置，只需修改 configure/jvm.conf 配置文件即可 !!! properties plugin.manager.extend.packages=com.fasterxml.jackson plugin.manager.extend.packages: 用于配置插件扩展包，配置后将优先加载父类加载器中的依赖 --- > 启动服务前请安装系统需要的各种插件，执行命令 ./bin/install-plugin.sh，也可以到服务商店中进行安装。 DataCap服务启动非常简单，执行以下脚本 bash ./bin/startup.sh 停止服务并执行以下脚本 bash ./bin/shutdown.sh !!! info \"提示\" 如果要调试系统，可以使用 ./bin/debug.sh 启动服务，但关闭窗口时它将停止 !!!",
    "url": "https://datacap.devlive.org/en/reference/get-started/install.html",
    "lang": "en"
  },
  {
    "title": "Docker 部署",
    "content": "DataCap 项目提供 devliveorg/datacap 包含 DataCap 服务器和默认配置的 Docker 映像。Docker 映像发布到 Docker Hub，可以与 Docker 运行时等一起使用。 要在 Docker 中运行 DataCap，您必须在计算机上安装 Docker 引擎。您可以从 Docker website, 或使用操作系统的打包系统。 使用 docker 命令从 devliveorg/datacap 图像。为其分配数据帽名称，以便以后更容易引用它。在后台运行它，并将默认 DataCap 端口（即 9096）从容器内部映射到工作站上的端口 9096。 bash docker run -d -p 9909:9096 --name datacap devliveorg/datacap 如果不指定容器映像标记，则默认为 latest ，但可以使用许多已发布的 DataCap 版本，例如 devliveorg/datacap:2024.4。 !!! danger \"注意\" 需要挂在外接 MySQL 配置，服务启动的方式为 bash docker run -d -p 9096:9096 -v /root/application.properties:/opt/app/datacap/configure/application.properties --name datacap devliveorg/datacap 假设您的配置文件在 /root/application.properties，如需要其他路径请指定绝对路径即可。 !!! 运行 docker ps 以查看在后台运行的所有容器。 bash -> % docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 2096fba19e2a devliveorg/datacap:latest \"sh ./bin/debug.sh\" 5 days ago Up 14 seconds 0.0.0.0:9909->9096/tcp datacap 您可以使用 docker stop datacap 和 docker start datacap 命令停止和启动容器。要完全删除已停止的容器，请运行 docker rm datacap。",
    "url": "https://datacap.devlive.org/en/reference/get-started/installContainers.html",
    "lang": "en"
  },
  {
    "title": "Docker Compose 部署",
    "content": "DataCap 项目提供 Docker Compose 方式部署，通过下载 docker-compose.yml 文件，或者使用以下代码进行服务部署。 --- > 只有基础的一些功能 yaml version: '3.8' services: app-mysql: image: mysql:latest environment: MYSQLROOTPASSWORD: 12345678 MYSQLDATABASE: datacap ports: \"3306:3306\" volumes: ./configure/schema/datacap.sql:/docker-entrypoint-initdb.d/schema.sql app-datacap: image: qianmoq/datacap:latest restart: always ports: \"9099:9099\" dependson: app-mysql app-clickhouse volumes: ./configure/docker/application.properties:/opt/app/datacap/configure/application.properties --- > 该方式包含了 数据集 功能 yaml version: '3.8' services: app-mysql: image: mysql:latest environment: MYSQLROOTPASSWORD: 12345678 MYSQLDATABASE: datacap ports: \"3306:3306\" volumes: ./configure/schema/datacap.sql:/docker-entrypoint-initdb.d/schema.sql app-clickhouse: image: clickhouse/clickhouse-server:latest restart: always ports: \"8123:8123\" environment: CLICKHOUSEDB=datacap app-datacap: image: qianmoq/datacap:latest restart: always ports: \"9099:9099\" dependson: app-mysql app-clickhouse volumes: ./configure/docker/application.properties:/opt/app/datacap/configure/application.properties !!! warning \"注意\" 需要同时下载一下多个文件： datacap.sql application.properties 下载完成后将他们放置到指定目录，也就是 ./configure/docker/ 和 ./configure/schema/ 如果需要自定义目录，可以修改 docker-compose.yml 文件中挂载的 volumes 配置即可。 !!! --- 以上工作完成后，使用以下命令进行启动服务。必须在包含 docker-compose.yml 文件的目录下执行 bash docker-compose up 如果需要后台启动使用以下命令 bash docker-compose up -d 启动成功后，浏览器打开 http://localhost:9096/ 即可看到网站。 --- 停止服务需要使用以下命令 bash docker-compose down",
    "url": "https://datacap.devlive.org/en/reference/get-started/installFromDockerCompose.html",
    "lang": "en"
  },
  {
    "title": "Rainbond 部署",
    "content": "如果您不熟悉 Kubernetes，想在 Kubernetes 中安装 DataCap，可以使用 Rainbond 来部署。Rainbond 是一个基于 Kubernetes 构建的云原生应用管理平台，可以很简单的将你的应用部署到 Kubernetes 中。 安装 Rainbond, 请参阅 Rainbond 快速安装. DataCap 已发布到 Rainbond 开源应用商店，可通过 Rainbond 开源应用商店一键部署 DataCap。 进入 Rainbond 控制台的 平台管理 -> 应用市场 -> 开源应用商店 中搜索 DataCap 并安装。 ![](https://static.goodrain.com/wechat/datacap/1.png) 填写以下信息，然后点击确认按钮进行安装。 团队：选择现有团队或创建新的团队 集群：选择对应的集群 应用：选择现有应用或创建新的应用 版本：选择要安装的版本 安装完成后，可通过 Rainbond 提供的默认域名访问 DataCap，默认用户密码 admin/12345678 ![](https://static.goodrain.com/wechat/datacap/topology.png)",
    "url": "https://datacap.devlive.org/en/reference/get-started/installRainbond.html",
    "lang": "en"
  },
  {
    "title": "即席查询",
    "content": "软件安装完成后点击顶部的 查询 菜单，进入即席查询页面。 !!! info \"提示\" 即席查询需要添加一个数据源，如何添加数据源请前往 数据源管理 !!! !img.png --- 进入查询页面后，窗口大致如下 !img1.png 查询页面分为左右两部分： 左侧为数据源 + 数据源元数据（需要选择数据源后才会展示） 右侧为 SQL 编辑器 + 结果展示（需要查询成功后才会展示） 当我们选择数据源后，左侧会展示类似下面的数据源元数据： !img2.png 此时右侧编辑器上方的工具栏也可以使用，我们在 SQL 编辑器中输入如下语句 sql SELECT FROM datacap.datacapsourcequery 点击编辑器顶部的 运行 按钮，即可查询。当查询成功后，编辑器下方会展示本次查询结果，类似如下 !img3.png --- 当我们在编辑器中选择执行的 SQL 后，顶部工具栏中的 运行 将会变为 运行选择内容 !img4.png!img4.png --- 当我们在编辑器中输入 SQL 后，点击顶部工具栏中的 格式化 按钮，即可格式化我们输入的 SQL !img5.png --- 当我们在编辑器中输入 SQL 并执行后，点击顶部工具栏中的 取消 按钮，即可取消本次查询。 !!! danger \"注意\" 取消功能并不意味着实际查询结束，查询将继续在后台运行。只是本次查询将不会在接受后续返回的结果。 !!! --- 这是一个片段模块的快捷功能，可以将编辑器中执行成功后的 SQL 快速添加到片段中。后续也可以在编辑器中实现片段的自动填充。 点击按钮后，会在右侧展示如下窗口，填写完成后，保存即可。 !img6.png --- 当查询完成后，会在 片段 按钮右侧出现一个展示耗时的按钮，点击后可以查看本次查询的消耗时间详情 !img7.png --- 在 datacap 中接入了 ai 模型，需要用户配置相应的信息方可使用，AI 模型支持 解析 优化 修复问题（只有查询出现错误后，才会出现该功能） 这里我们不多展示，可以自己体验。 --- 在 AI 按钮右侧有一个用于输入数字的输入框，他主要用于输入自动添加 LIMIT 的总数量（需要启动该功能，目前为实验性功能） --- 在编辑器上方的右侧有个 !btn[创建编辑器](){bg-white border} 按钮，用于添加编辑器，点击后可以增加一个编辑窗口 !img8.png --- 当我们添加新的编辑器后，在编辑器名称后有个 :circle-x: 按钮，点击后可以关闭该编辑器 !img9.png 默认查询后渲染为普通查询表格，可以在表格的头部做排序，筛选等操作。 !img10.png 当点击!btn[可视化]{bg-white border}按钮后的开关，会重新渲染下方表格，对表格中的数据进行分页的转换，当关闭分页后回会展示如下 !img11.png 会展示所有的数据不在进行分页。 目前只支持导出 CSV ，该操作并不会访问后端服务，点击后会导出当前查询的所有返回结果数据。",
    "url": "https://datacap.devlive.org/en/reference/get-started/query/home.html",
    "lang": "en"
  },
  {
    "title": "仪表盘",
    "content": "软件安装完成后点击顶部的 仪表盘 菜单，进入仪表盘页面。 !img.png --- 点击页面左侧的 :circle-plus: 按钮弹出如下窗口 !img1.png 点击!btn[添加图表]{bg-white border}按钮，弹出数据报表窗口 !img2.png 选择需要添加的图表后点击 !btn[保存]{bg-blue-500 text-white} 按钮，出现类似如下页面 !img3.png 可以调整报表的位置大小等，然后点击右侧的 !btn[保存]{bg-blue-500 text-white} 按钮，弹出保存配置窗口 !img4.png 配置相关信息后，点击 !btn[保存]{bg-blue-500 text-white} 按钮，保存成功后将跳转到仪表盘预览页面。 !img5.png 这里会显示当前仪表盘的报表数据。 --- 在仪表盘列表页面，点击仪表盘的名称，可跳转到当前选择的仪表盘。 !img6.png !!! info \"提示\" 该操作将会跳转到新页面进行仪表盘的显示。 !!! --- 在仪表盘列表页面，点击 :cog: 图标，可出现操作列表 !img7.png 点击 !btn[修改仪表盘] 菜单，即可跳转到编辑仪表盘页面，该操作和新建仪表盘操作一致。 --- 在仪表盘列表页面，点击 :cog: 图标，可出现操作列表 点击 !btn[删除仪表盘] 菜单，即可弹出如下窗口 !img8.png 在输入框中输入仪表盘名称，点击删除即可删除该仪表盘。",
    "url": "https://datacap.devlive.org/en/reference/get-started/dashboard/home.html",
    "lang": "en"
  },
  {
    "title": "新建 & 编辑",
    "content": "在查询页面进行查询后会在结果表格上方显示出如下窗口 !img.png 点击图中红框选择的按钮，跳转到新建数据集页面 !img1.png 该页面中我们可以修改要执行的 SQL 点击 !btn[执行] 按钮，会在下方出现预览数据的列表，点击顶部的 !btn[配置] 按钮，窗口如下 !img2.png 在页面中我们可以配置 数据列 和 基本信息，根据选择不同的 tab 进行相关配置。 !!! info \"提示\" 在数据集中列分为两种 虚拟列 和 真实列。 虚拟列 不会在实际的底层存储构建（只是用函数比较，只会在查询中实时展示），真实列 需要在底层存储中进行构建，这样在查询的时候会有更好的性能。 !!! 我们点击每行数据中的 操作 配置下的 :CirclePlus: 按钮，可以添加虚拟列 !img3.png 在虚拟列中部分配置无法使用，因为它不做具体的存储操作。 !!! danger \"警告\" 虚拟列 是 DataCap 中的一个新特性，该列只会在运行时生效，一般列名都是函数的表示，比如 SUM(id)，在查询的时候会将该 SQL 转换。 !!! 点击顶部的 数据配置 标签，配置项显示如下 !img4.png 我们完成基本的配置信息后点击顶部的 创建数据集 按钮，即可在后台构建数据集。届时会跳转到数据集列表。",
    "url": "https://datacap.devlive.org/en/reference/get-started/dataset/create/home.html",
    "lang": "en"
  },
  {
    "title": "即席查询",
    "content": "在数据集列表中在每行数据的末尾有 操作 按钮，大概如下 !img.png 我们点击 :ChartNoAxesColumn: 图标后会跳转到 即席查询 页面 !img1.png 页面分为左右两侧，左侧是当前数据集的 指标 & 维度 配置，右侧是 查询 配置 当拖拽左侧的 指标 & 维度 时会在右侧显示查询结果 !img2.png 当查询列包含指标时，点击指标后面的 :cog:，弹出如下窗口 !img3.png 可以配置当前指标的 表达式，别名，排序。 !!! warning \"注意\" 不同的类型指标包含不同的表达式 !!! 当查询列包含维度时，点击 :cog:，弹出如下窗口 !img4.png 可以配置当前维度的 别名，排序，自定义函数。 当查询成功后，可以配置多种图表类型。 !img5.png 可以根据自己的需求定制目前已经支持的图表。 图表配置完成后，点击 发布 按钮，弹出如下窗口 !img6.png 配置图表的名称后点击 发布 按钮，图表发布成功后，可以在图表列表中查看。",
    "url": "https://datacap.devlive.org/en/reference/get-started/dataset/adhoc/home.html",
    "lang": "en"
  },
  {
    "title": "同步数据",
    "content": "数据集提供了手动同步数据的操作，可以通过数据集列表中在每行数据的末尾有 同步数据 按钮，如下窗口 !img.png 点击 同步数据 按钮后会弹出 同步数据 窗口 !img1.png 确定同步数据后，点击 同步数据 按钮后，系统会在后台创建同步数据任务，进行数据同步。",
    "url": "https://datacap.devlive.org/en/reference/get-started/dataset/sync/home.html",
    "lang": "en"
  },
  {
    "title": "同步历史",
    "content": "数据集提供了查看同步历史的操作，可以通过数据集列表中在每行数据的末尾有 同步历史 按钮，如下窗口 !img.png 点击 同步历史 按钮后会弹出 同步历史 窗口 !img1.png 在该窗口中会展示当前数据集的所有同步历史，包含手动同步和定时任务同步的历史记录。 如果任务同步失败会展示任务的错误信息，点击任务的状态按钮即可看到错误信息。 !img2.png 该操作只会在同步失败的状态下生效。",
    "url": "https://datacap.devlive.org/en/reference/get-started/dataset/history/home.html",
    "lang": "en"
  },
  {
    "title": "清空数据",
    "content": "数据集提供了清空数据的操作，可以通过数据集列表中在每行数据的末尾有 清空数据 按钮，如下窗口 !img.png !!! info \"提示\" 该操作只会在当前数据集有数据的情况下可以操作。 !!! 当数据集无数据的情况下，该菜单将不可操作。 点击 清空数据 按钮后会弹出 清空数据 窗口 !img1.png 该窗口中会展示当前数据集的 总行数 和 总大小 确定清空数据后，点击 清空数据 按钮后，系统会在后台创建清空数据任务，进行清空数据。",
    "url": "https://datacap.devlive.org/en/reference/get-started/dataset/clear/home.html",
    "lang": "en"
  },
  {
    "title": "使用案例",
    "content": "",
    "url": "https://datacap.devlive.org/en/useCases.html",
    "lang": "en"
  },
  {
    "title": "合作伙伴",
    "content": "",
    "url": "https://datacap.devlive.org/en/partners.html",
    "lang": "en"
  },
  {
    "title": "自主机部署",
    "content": "DataCap 是支持用户将服务部署到自主机中。通过本文档用户可以了解如何在自主机中部署 DataCap。 --- !!! warning \"注意\" 该软件的二进制包基于以下系统进行编译和测试。它尚未在其他版本上进行测试，理论上受支持。 如果有不支持的系统，请使用源码编译方法主动编译二进制文件。 !!! | System | Version | |--------|------------| | JDK | \\>=11 | | MySQL | \\>=5.6.x | --- !!! info \"提示\" 从以下地址下载相应系统的二进制软件包进行安装。如果您需要使用源码安装请前往查看开发者文档模块。 !!! 1.下载最新发布版本 2.将二进制文件下载到本地后运行以下命令 bash tar -xvzf datacap-<VERSION>-bin.tar.gz 进入软件根目录 bash cd datacap-<VERSION> --- 对于软件的首次安装，您需要将 schema/datacap.sql 文件中的sql脚本导入MySQL服务器。注意需要导入的脚本根据下载的软件包进行匹配 !!! danger \"注意\" 如果您是通过其他版本升级，请执行 schema/<VERSION>/schema.sql !!! datacap 软件中的所有配置均在 configure/application.properties 文件中。 导入 SQL 脚本后，修改 configure/application.properties 配置文件以修改MySQL服务器的配置信息 properties server.port=9096 server.address=localhost spring.jackson.time-zone=GMT+8 spring.jackson.date-format=yyyy-MM-dd HH:mm:ss datacap.security.secret=DataCapSecretKey datacap.security.expiration=86400000 datacap.editor.sugs.maxSize=1000 server.port: 用于配置服务在服务器中启动监听的端口，默认为 9096 server.address: 用于配置服务在本地的监听地址，如果需要使用 IP+端口 方便外部机器访问，请不要设置为 localhost，建议设置为 0.0.0.0 spring.jackson.time-zone: 用于配置时区，默认为 GMT+8 spring.jackson.date-format: 用于配置日期格式，默认为 yyyy-MM-dd HH:mm:ss datacap.security.secret: 用于配置数据安全管理的密钥，默认为 DataCapSecretKey datacap.security.expiration: 用于配置数据安全管理的过期时间，单位为毫秒，默认为 86400000 datacap.editor.sugs.maxSize: 用于配置数据编辑器的最大行数，默认为 1000 已经失效不在使用 properties spring.mvc.throw-exception-if-no-handler-found=true spring.resources.add-mappings=false spring.web.resources.add-mappings=true spring.mvc.throw-exception-if-no-handler-found: 用于配置是否抛出异常 spring.resources.add-mappings: 用于配置是否启用静态资源映射 spring.web.resources.add-mappings: 用于配置是否启用静态资源映射 !!! danger \"注意\" 如果版本 >=8.x，请设置 allowPublicKeyRetrieval=true !!! properties spring.datasource.url=jdbc:mysql://localhost:3306/datacap?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true&useSSL=false&useOldAliasMetadataBehavior=true&jdbcCompliantTruncation=false&allowPublicKeyRetrieval=true spring.datasource.username=root spring.datasource.password=12345678 spring.datasource.url: 用于配置数据库连接地址 spring.datasource.username: 用于配置数据库用户名 spring.datasource.password: 用于配置数据库密码 !!! info \"提示\" 支持所有 Spring Data 的配置参数 !!! properties datacap.executor.data= datacap.executor.way=LOCAL datacap.executor.mode=CLIENT datacap.executor.engine=SPARK datacap.executor.startScript=start-seatunnel-spark-connector-v2.sh datacap.executor.seatunnel.home=/opt/lib/seatunnel datacap.executor.data: 用于配置执行器的数据缓冲路径 datacap.executor.way: 用于配置执行器的执行方式，不同的执行器拥有不同的执行方式 datacap.executor.mode: 用于配置执行器的执行模式，不同的执行器拥有不同的执行模式 datacap.executor.engine: 用于配置执行器的执行引擎 datacap.executor.startScript: 用于配置执行器的启动脚本 datacap.executor.seatunnel.home: 用于配置执行器的 Apache Seatunnel 主目录 ::: tabs === \"Spark 引擎配置\" properties datacap.executor.data= datacap.executor.way=LOCAL datacap.executor.mode=CLIENT datacap.executor.engine=SPARK datacap.executor.startScript=start-seatunnel-spark-connector-v2.sh datacap.executor.seatunnel.home=/opt/lib/seatunnel === \"Flink 引擎配置\" properties datacap.executor.data= datacap.executor.way=LOCAL datacap.executor.mode=CLIENT datacap.executor.engine=FLINK datacap.executor.startScript=start-seatunnel-flink-13-connector-v2.sh datacap.executor.seatunnel.home=/opt/lib/seatunnel === \"Seatunnel 引擎配置\" properties datacap.executor.data= # Only support LOCAL datacap.executor.way=LOCAL datacap.executor.mode=CLIENT datacap.executor.engine=SEATUNNEL datacap.executor.startScript=seatunnel.sh datacap.executor.seatunnel.home=/opt/lib/seatunnel ::: properties datacap.config.data= datacap.cache.data= datacap.config.data: 用于配置上传配置文件的路径 datacap.cache.data: 用于配置上传缓存文件的路径 properties datacap.openai.backend=https://api.openai.com datacap.openai.token= datacap.openai.model=GPT35TURBO0613 datacap.openai.timeout=30 datacap.openai.backend: 用于配置 OpenAI 的后端地址 datacap.openai.token: 用于配置 OpenAI 的 token datacap.openai.model: 用于配置 OpenAI 的模型 datacap.openai.timeout: 用于配置 OpenAI 的超时时间，单位为秒 properties datacap.registration.enable= datacap.captcha.enable= datacap.cache.maximum=100000 datacap.cache.expiration=5 datacap.audit.sql.print=false datacap.registration.enable: 用于配置是否开启注册 datacap.captcha.enable: 用于配置是否开启验证码 datacap.cache.maximum: 用于配置缓存最大值 datacap.cache.expiration: 用于配置缓存过期时间，单位为分钟 datacap.audit.sql.print: 用于配置是否打印 SQL properties datacap.pipeline.maxRunning=100 datacap.pipeline.maxQueue=200 datacap.pipeline.reset=STOPPED datacap.pipeline.maxRunning: 用于配置最大运行数 datacap.pipeline.maxQueue: 用于配置最大队列 datacap.pipeline.reset: 用于配置重置策略 --- 支持的存储类型详见 https://github.com/devlive-community/datacap/tree/dev/fs properties datacap.fs.type=Local datacap.fs.access= datacap.fs.secret= datacap.fs.endpoint= datacap.fs.bucket= datacap.fs.type: 用于配置文件系统类型 datacap.fs.access: 用于配置文件系统访问，该类型可以为空 datacap.fs.secret: 用于配置文件系统密钥，该类型可以为空 datacap.fs.endpoint: 用于配置文件系统端点，如果填写后将追加为目录 该类型可以为空 datacap.fs.bucket: 用于配置文件系统存储桶，该类型可以为空 properties datacap.fs.type=AliOss datacap.fs.access= datacap.fs.secret= datacap.fs.endpoint= datacap.fs.bucket= datacap.fs.type: AliOss properties datacap.fs.type=Qiniu datacap.fs.access= datacap.fs.secret= datacap.fs.endpoint= datacap.fs.bucket= datacap.fs.type: Qiniu properties datacap.experimental.autoLimit=true datacap.experimental.data={user.dir}/data datacap.experimental.avatarPath={username}/avatar/ datacap.experimental.autoLimit: 用于配置是否自动增加 LIMIT datacap.experimental.data: 用于配置实验性功能的数据路径 datacap.experimental.avatarPath: 用于配置实验性功能的头像路径 !!! warning \"警告\" 如果需要修改日志配置，只需修改 configure/logback.xml 配置文件即可 !!! !!! warning \"警告\" 如果您需要定制化 JVM 配置，只需修改 configure/jvm.conf 配置文件即可 !!! properties plugin.manager.extend.packages=com.fasterxml.jackson plugin.manager.extend.packages: 用于配置插件扩展包，配置后将优先加载父类加载器中的依赖 --- > 启动服务前请安装系统需要的各种插件，执行命令 ./bin/install-plugin.sh，也可以到服务商店中进行安装。 DataCap服务启动非常简单，执行以下脚本 bash ./bin/startup.sh 停止服务并执行以下脚本 bash ./bin/shutdown.sh !!! info \"提示\" 如果要调试系统，可以使用 ./bin/debug.sh 启动服务，但关闭窗口时它将停止 !!!",
    "url": "https://datacap.devlive.org/zh-CN/reference/get-started/install.html",
    "lang": "zh-CN"
  },
  {
    "title": "Docker 部署",
    "content": "DataCap 项目提供 devliveorg/datacap 包含 DataCap 服务器和默认配置的 Docker 映像。Docker 映像发布到 Docker Hub，可以与 Docker 运行时等一起使用。 要在 Docker 中运行 DataCap，您必须在计算机上安装 Docker 引擎。您可以从 Docker website, 或使用操作系统的打包系统。 使用 docker 命令从 devliveorg/datacap 图像。为其分配数据帽名称，以便以后更容易引用它。在后台运行它，并将默认 DataCap 端口（即 9096）从容器内部映射到工作站上的端口 9096。 bash docker run -d -p 9909:9096 --name datacap devliveorg/datacap 如果不指定容器映像标记，则默认为 latest ，但可以使用许多已发布的 DataCap 版本，例如 devliveorg/datacap:2024.4。 !!! danger \"注意\" 需要挂在外接 MySQL 配置，服务启动的方式为 bash docker run -d -p 9096:9096 -v /root/application.properties:/opt/app/datacap/configure/application.properties --name datacap devliveorg/datacap 假设您的配置文件在 /root/application.properties，如需要其他路径请指定绝对路径即可。 !!! 运行 docker ps 以查看在后台运行的所有容器。 bash -> % docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 2096fba19e2a devliveorg/datacap:latest \"sh ./bin/debug.sh\" 5 days ago Up 14 seconds 0.0.0.0:9909->9096/tcp datacap 您可以使用 docker stop datacap 和 docker start datacap 命令停止和启动容器。要完全删除已停止的容器，请运行 docker rm datacap。",
    "url": "https://datacap.devlive.org/zh-CN/reference/get-started/installContainers.html",
    "lang": "zh-CN"
  },
  {
    "title": "Docker Compose 部署",
    "content": "DataCap 项目提供 Docker Compose 方式部署，通过下载 docker-compose.yml 文件，或者使用以下代码进行服务部署。 --- > 只有基础的一些功能 yaml version: '3.8' services: app-mysql: image: mysql:latest environment: MYSQLROOTPASSWORD: 12345678 MYSQLDATABASE: datacap ports: \"3306:3306\" volumes: ./configure/schema/datacap.sql:/docker-entrypoint-initdb.d/schema.sql app-datacap: image: qianmoq/datacap:latest restart: always ports: \"9099:9099\" dependson: app-mysql app-clickhouse volumes: ./configure/docker/application.properties:/opt/app/datacap/configure/application.properties --- > 该方式包含了 数据集 功能 yaml version: '3.8' services: app-mysql: image: mysql:latest environment: MYSQLROOTPASSWORD: 12345678 MYSQLDATABASE: datacap ports: \"3306:3306\" volumes: ./configure/schema/datacap.sql:/docker-entrypoint-initdb.d/schema.sql app-clickhouse: image: clickhouse/clickhouse-server:latest restart: always ports: \"8123:8123\" environment: CLICKHOUSEDB=datacap app-datacap: image: qianmoq/datacap:latest restart: always ports: \"9099:9099\" dependson: app-mysql app-clickhouse volumes: ./configure/docker/application.properties:/opt/app/datacap/configure/application.properties !!! warning \"注意\" 需要同时下载一下多个文件： datacap.sql application.properties 下载完成后将他们放置到指定目录，也就是 ./configure/docker/ 和 ./configure/schema/ 如果需要自定义目录，可以修改 docker-compose.yml 文件中挂载的 volumes 配置即可。 !!! --- 以上工作完成后，使用以下命令进行启动服务。必须在包含 docker-compose.yml 文件的目录下执行 bash docker-compose up 如果需要后台启动使用以下命令 bash docker-compose up -d 启动成功后，浏览器打开 http://localhost:9096/ 即可看到网站。 --- 停止服务需要使用以下命令 bash docker-compose down",
    "url": "https://datacap.devlive.org/zh-CN/reference/get-started/installFromDockerCompose.html",
    "lang": "zh-CN"
  },
  {
    "title": "Rainbond 部署",
    "content": "如果您不熟悉 Kubernetes，想在 Kubernetes 中安装 DataCap，可以使用 Rainbond 来部署。Rainbond 是一个基于 Kubernetes 构建的云原生应用管理平台，可以很简单的将你的应用部署到 Kubernetes 中。 安装 Rainbond, 请参阅 Rainbond 快速安装. DataCap 已发布到 Rainbond 开源应用商店，可通过 Rainbond 开源应用商店一键部署 DataCap。 进入 Rainbond 控制台的 平台管理 -> 应用市场 -> 开源应用商店 中搜索 DataCap 并安装。 ![](https://static.goodrain.com/wechat/datacap/1.png) 填写以下信息，然后点击确认按钮进行安装。 团队：选择现有团队或创建新的团队 集群：选择对应的集群 应用：选择现有应用或创建新的应用 版本：选择要安装的版本 安装完成后，可通过 Rainbond 提供的默认域名访问 DataCap，默认用户密码 admin/12345678 ![](https://static.goodrain.com/wechat/datacap/topology.png)",
    "url": "https://datacap.devlive.org/zh-CN/reference/get-started/installRainbond.html",
    "lang": "zh-CN"
  },
  {
    "title": "即席查询",
    "content": "软件安装完成后点击顶部的 查询 菜单，进入即席查询页面。 !!! info \"提示\" 即席查询需要添加一个数据源，如何添加数据源请前往 数据源管理 !!! !img.png --- 进入查询页面后，窗口大致如下 !img1.png 查询页面分为左右两部分： 左侧为数据源 + 数据源元数据（需要选择数据源后才会展示） 右侧为 SQL 编辑器 + 结果展示（需要查询成功后才会展示） 当我们选择数据源后，左侧会展示类似下面的数据源元数据： !img2.png 此时右侧编辑器上方的工具栏也可以使用，我们在 SQL 编辑器中输入如下语句 sql SELECT FROM datacap.datacapsourcequery 点击编辑器顶部的 运行 按钮，即可查询。当查询成功后，编辑器下方会展示本次查询结果，类似如下 !img3.png --- 当我们在编辑器中选择执行的 SQL 后，顶部工具栏中的 运行 将会变为 运行选择内容 !img4.png!img4.png --- 当我们在编辑器中输入 SQL 后，点击顶部工具栏中的 格式化 按钮，即可格式化我们输入的 SQL !img5.png --- 当我们在编辑器中输入 SQL 并执行后，点击顶部工具栏中的 取消 按钮，即可取消本次查询。 !!! danger \"注意\" 取消功能并不意味着实际查询结束，查询将继续在后台运行。只是本次查询将不会在接受后续返回的结果。 !!! --- 这是一个片段模块的快捷功能，可以将编辑器中执行成功后的 SQL 快速添加到片段中。后续也可以在编辑器中实现片段的自动填充。 点击按钮后，会在右侧展示如下窗口，填写完成后，保存即可。 !img6.png --- 当查询完成后，会在 片段 按钮右侧出现一个展示耗时的按钮，点击后可以查看本次查询的消耗时间详情 !img7.png --- 在 datacap 中接入了 ai 模型，需要用户配置相应的信息方可使用，AI 模型支持 解析 优化 修复问题（只有查询出现错误后，才会出现该功能） 这里我们不多展示，可以自己体验。 --- 在 AI 按钮右侧有一个用于输入数字的输入框，他主要用于输入自动添加 LIMIT 的总数量（需要启动该功能，目前为实验性功能） --- 在编辑器上方的右侧有个 !btn[创建编辑器](){bg-white border} 按钮，用于添加编辑器，点击后可以增加一个编辑窗口 !img8.png --- 当我们添加新的编辑器后，在编辑器名称后有个 :circle-x: 按钮，点击后可以关闭该编辑器 !img9.png 默认查询后渲染为普通查询表格，可以在表格的头部做排序，筛选等操作。 !img10.png 当点击!btn[可视化]{bg-white border}按钮后的开关，会重新渲染下方表格，对表格中的数据进行分页的转换，当关闭分页后回会展示如下 !img11.png 会展示所有的数据不在进行分页。 目前只支持导出 CSV ，该操作并不会访问后端服务，点击后会导出当前查询的所有返回结果数据。",
    "url": "https://datacap.devlive.org/zh-CN/reference/get-started/query/home.html",
    "lang": "zh-CN"
  },
  {
    "title": "仪表盘",
    "content": "软件安装完成后点击顶部的 仪表盘 菜单，进入仪表盘页面。 !img.png --- 点击页面左侧的 :circle-plus: 按钮弹出如下窗口 !img1.png 点击!btn[添加图表]{bg-white border}按钮，弹出数据报表窗口 !img2.png 选择需要添加的图表后点击 !btn[保存]{bg-blue-500 text-white} 按钮，出现类似如下页面 !img3.png 可以调整报表的位置大小等，然后点击右侧的 !btn[保存]{bg-blue-500 text-white} 按钮，弹出保存配置窗口 !img4.png 配置相关信息后，点击 !btn[保存]{bg-blue-500 text-white} 按钮，保存成功后将跳转到仪表盘预览页面。 !img5.png 这里会显示当前仪表盘的报表数据。 --- 在仪表盘列表页面，点击仪表盘的名称，可跳转到当前选择的仪表盘。 !img6.png !!! info \"提示\" 该操作将会跳转到新页面进行仪表盘的显示。 !!! --- 在仪表盘列表页面，点击 :cog: 图标，可出现操作列表 !img7.png 点击 !btn[修改仪表盘] 菜单，即可跳转到编辑仪表盘页面，该操作和新建仪表盘操作一致。 --- 在仪表盘列表页面，点击 :cog: 图标，可出现操作列表 点击 !btn[删除仪表盘] 菜单，即可弹出如下窗口 !img8.png 在输入框中输入仪表盘名称，点击删除即可删除该仪表盘。",
    "url": "https://datacap.devlive.org/zh-CN/reference/get-started/dashboard/home.html",
    "lang": "zh-CN"
  },
  {
    "title": "新建 & 编辑",
    "content": "在查询页面进行查询后会在结果表格上方显示出如下窗口 !img.png 点击图中红框选择的按钮，跳转到新建数据集页面 !img1.png 该页面中我们可以修改要执行的 SQL 点击 !btn[执行] 按钮，会在下方出现预览数据的列表，点击顶部的 !btn[配置] 按钮，窗口如下 !img2.png 在页面中我们可以配置 数据列 和 基本信息，根据选择不同的 tab 进行相关配置。 !!! info \"提示\" 在数据集中列分为两种 虚拟列 和 真实列。 虚拟列 不会在实际的底层存储构建（只是用函数比较，只会在查询中实时展示），真实列 需要在底层存储中进行构建，这样在查询的时候会有更好的性能。 !!! 我们点击每行数据中的 操作 配置下的 :CirclePlus: 按钮，可以添加虚拟列 !img3.png 在虚拟列中部分配置无法使用，因为它不做具体的存储操作。 !!! danger \"警告\" 虚拟列 是 DataCap 中的一个新特性，该列只会在运行时生效，一般列名都是函数的表示，比如 SUM(id)，在查询的时候会将该 SQL 转换。 !!! 点击顶部的 数据配置 标签，配置项显示如下 !img4.png 我们完成基本的配置信息后点击顶部的 创建数据集 按钮，即可在后台构建数据集。届时会跳转到数据集列表。",
    "url": "https://datacap.devlive.org/zh-CN/reference/get-started/dataset/create/home.html",
    "lang": "zh-CN"
  },
  {
    "title": "即席查询",
    "content": "在数据集列表中在每行数据的末尾有 操作 按钮，大概如下 !img.png 我们点击 :ChartNoAxesColumn: 图标后会跳转到 即席查询 页面 !img1.png 页面分为左右两侧，左侧是当前数据集的 指标 & 维度 配置，右侧是 查询 配置 当拖拽左侧的 指标 & 维度 时会在右侧显示查询结果 !img2.png 当查询列包含指标时，点击指标后面的 :cog:，弹出如下窗口 !img3.png 可以配置当前指标的 表达式，别名，排序。 !!! warning \"注意\" 不同的类型指标包含不同的表达式 !!! 当查询列包含维度时，点击 :cog:，弹出如下窗口 !img4.png 可以配置当前维度的 别名，排序，自定义函数。 当查询成功后，可以配置多种图表类型。 !img5.png 可以根据自己的需求定制目前已经支持的图表。 图表配置完成后，点击 发布 按钮，弹出如下窗口 !img6.png 配置图表的名称后点击 发布 按钮，图表发布成功后，可以在图表列表中查看。",
    "url": "https://datacap.devlive.org/zh-CN/reference/get-started/dataset/adhoc/home.html",
    "lang": "zh-CN"
  },
  {
    "title": "同步数据",
    "content": "数据集提供了手动同步数据的操作，可以通过数据集列表中在每行数据的末尾有 同步数据 按钮，如下窗口 !img.png 点击 同步数据 按钮后会弹出 同步数据 窗口 !img1.png 确定同步数据后，点击 同步数据 按钮后，系统会在后台创建同步数据任务，进行数据同步。",
    "url": "https://datacap.devlive.org/zh-CN/reference/get-started/dataset/sync/home.html",
    "lang": "zh-CN"
  },
  {
    "title": "同步历史",
    "content": "数据集提供了查看同步历史的操作，可以通过数据集列表中在每行数据的末尾有 同步历史 按钮，如下窗口 !img.png 点击 同步历史 按钮后会弹出 同步历史 窗口 !img1.png 在该窗口中会展示当前数据集的所有同步历史，包含手动同步和定时任务同步的历史记录。 如果任务同步失败会展示任务的错误信息，点击任务的状态按钮即可看到错误信息。 !img2.png 该操作只会在同步失败的状态下生效。",
    "url": "https://datacap.devlive.org/zh-CN/reference/get-started/dataset/history/home.html",
    "lang": "zh-CN"
  },
  {
    "title": "清空数据",
    "content": "数据集提供了清空数据的操作，可以通过数据集列表中在每行数据的末尾有 清空数据 按钮，如下窗口 !img.png !!! info \"提示\" 该操作只会在当前数据集有数据的情况下可以操作。 !!! 当数据集无数据的情况下，该菜单将不可操作。 点击 清空数据 按钮后会弹出 清空数据 窗口 !img1.png 该窗口中会展示当前数据集的 总行数 和 总大小 确定清空数据后，点击 清空数据 按钮后，系统会在后台创建清空数据任务，进行清空数据。",
    "url": "https://datacap.devlive.org/zh-CN/reference/get-started/dataset/clear/home.html",
    "lang": "zh-CN"
  },
  {
    "title": "使用案例",
    "content": "",
    "url": "https://datacap.devlive.org/zh-CN/useCases.html",
    "lang": "zh-CN"
  },
  {
    "title": "合作伙伴",
    "content": "",
    "url": "https://datacap.devlive.org/zh-CN/partners.html",
    "lang": "zh-CN"
  }
]